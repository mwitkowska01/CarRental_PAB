@page "/contractor/car/{id:int}"
@inject IContractorService _contractorService
@inject IJSRuntime _js
@inject NavigationManager _navigationManager

<h1>Lista aut klienta: @contractorDto.Name @contractorDto.LastName </h1>
<br />
<div>
    <div>
        <a href="car/add" class="btn bg-primary"><span class="oi oi-plus" aria-hidden="true"></span>Dodaj auto klienta</a>
    </div>
    <br />
    <div>
        <table class="table">
            <thead>
                <tr>
                    <th>Marka</th>
                    <th>Model</th>
                    <th>Rok produkcji</th>
                    <th>VIN</th>
                    <th>Numer rejestracyjny</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var p in carList)
                {
                    <tr>
                        <td>@p.Make</td>
                        <td>@p.Model</td>
                        <td>@p.Year</td>
                        <td>@p.VIN</td>
                        <td>@p.LicensePlate</td>
                        <td>
                            <button class="btn bg-danger" @onclick="@(()=>DeleteContractorCar(@p.Id))"><span class="oi oi-delete" aria-hidden="true"></span>Usuń</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private List<CarDto> carList  = null;
    private ContractorDto contractorDto = null;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        carList = _contractorService.GetContractorCar(Id);
        contractorDto = _contractorService.GetById(Id);
    }
    protected async Task DeleteContractorCar(int id)
    {
        var contractor = carList.First(q => q.Id == id);
        var confirm = await _js.InvokeAsync<bool>("confirm", $"Jesteś pewien że chcesz usunąć Samochód klienta: {contractor.LicensePlate}?");
        if (confirm)
        {
            _contractorService.DeleteCar(Id, id);
            OnInitialized();
        }
    }
    
}